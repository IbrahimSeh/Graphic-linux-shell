/*
 * History.cpp
 *
 *  Created on: Dec 11, 2018
 *      Author: root
 */

#include "History.h"
#include <menu.h>

#define HWIN_LEFT 0
#define HWIN_TOP 0
#define HWIN_HEIGHT 25
#define HWIN_WIDTH 80
#define HEDIT_START_POSITION 1
#define LINE_FEED 10
#define CTRL_D 4

using namespace std;


template <class HistoryItem>
History<HistoryItem>::History(int size) {
	this->size = size;
	first = last = current = NULL;
	count = 0;
}

template <class HistoryItem>
History<HistoryItem>::~History() {
	struct element *p, *q;
	p = first;
	while (p) {
		q=p;
		p=p->next;
		delete q;
	}

}

template <class HistoryItem>
void History<HistoryItem>::append(HistoryItem *item){
	if(count == size) return ;
	struct element *p = new struct element;
	p->item = item;
	p->next = NULL;
	p->prev = last;
	if (last) {
		last->next = p;
	} else {
		first=p;
	}
	last = p;
	current = p;
	count++;
}

template <class HistoryItem>
void History<HistoryItem>::goPastEnd()
{
	current=NULL;
}

template <class HistoryItem>
HistoryItem *History<HistoryItem>::up()
{
	if (!first) return NULL;
	if (current == NULL) {
		current = last;
	} else if (current != first) current = current->prev;
	return current ? current->item : NULL;
}

template <class HistoryItem>
HistoryItem *History<HistoryItem>::down()
{
	if (!first) return NULL;
	if (current != NULL && current != last) current = current->next;
	return current ? current->item : NULL;
}

template <class HistoryItem>
void History<HistoryItem>::initMenu() {

	/* Create items */
	my_items = new ITEM * [count+1];
	struct element *p=first;
	int i=0;
	while(p){
		my_items[i++] = new_item(p->item->getTheString().c_str(),NULL);
		p = p->next;
	}

	/* Create menu*/
	my_menu = new_menu(my_items);

	/* Create the window to be associated with the menu */
	my_menu_win = newwin(HWIN_HEIGHT, HWIN_WIDTH, HWIN_TOP, 0);
	keypad(my_menu_win, TRUE);

	/* Set main window and sub window */
	set_menu_win(my_menu, my_menu_win);
	set_menu_sub(my_menu,NULL);
	set_menu_format(my_menu, HWIN_HEIGHT -1, 1);

	/* Set menu mark to the string "Nothing" */
	set_menu_mark(my_menu, "");
	/* Post the menu */
	post_menu(my_menu);
	wrefresh(my_menu_win);
	mvwaddstr(my_menu_win, HWIN_HEIGHT-2, HWIN_WIDTH - 25, "(CTRL_D to Exit)");
	refresh();
}

template <class HistoryItem>
string History<HistoryItem>::showHistory()
{
	if(count == 0) return "";//Nothing to display

	initMenu();
	wmove(my_menu_win, 0, 0);//set cursor position to top  of window

	char *ret;
	int c, cursorPosition = 0;
	while((c = wgetch(my_menu_win)) != CTRL_D) {
		switch(c) {
		case KEY_DOWN:
			menu_driver(my_menu, REQ_DOWN_ITEM);
			break;
		case KEY_UP:
			menu_driver(my_menu, REQ_UP_ITEM);
			break;
		case KEY_NPAGE:
			menu_driver(my_menu, REQ_SCR_DPAGE);
			break;
		case KEY_PPAGE:
			menu_driver(my_menu, REQ_SCR_UPAGE);
			break;
		case KEY_MOUSE:
			cursorPosition = mouseClick(my_menu_win);
			wmove(my_menu_win, cursorPosition, 0);
			break;
		case BUTTON1_DOUBLE_CLICKED:
			cursorPosition = mouseClick(my_menu_win);
			wmove(my_menu_win, cursorPosition, 0);

			break;
		case LINE_FEED:
			ret = new char[WIN_WIDTH +1];
			winstr(my_menu_win,ret);
			endMenu();
			std::string retLine;
			retLine(ret);
			retLine.erase(retLine.find_last_not_of(" \n\r\t")+1);
			return retLine;
		}
		wrefresh(my_menu_win);
	}
	endMenu();
	return "";
}

template <class HistoryItem>
void History<HistoryItem>::endMenu() {
	int i;
	unpost_menu(my_menu);
	free_menu(my_menu);
	for(i = 0; i < count; i++)
		free_item(my_items[i]);
	delete my_items;
	delwin(my_menu_win);
	clear();
	refresh();
}

template <class HistoryItem>
int History<HistoryItem>::mouseClick(WINDOW *win)
{
	MEVENT mouseEvent;
	getmouse(&mouseEvent);
	wmove(win,mouseEvent.y, mouseEvent.x);
	return mouseEvent.y < count +1 ? mouseEvent.y : 0;
}
