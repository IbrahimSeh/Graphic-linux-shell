/*
 * CommandLine.cpp
 *
 *  Created on: Mar 17, 2018
 *      Author: cmshalom
 */


#include <stdlib.h>
#include <stdio.h>
#include "CommandLine.h"

#define WIN_LEFT 0
#define WIN_TOP 21
#define WIN_HEIGHT 3
#define WIN_WIDTH 80
#define EDIT_START_POSITION 1
#define EDIT_END_POSITION WIN_WIDTH - 2
#define MAX_COMMAND_LENGTH EDIT_END_POSITION - EDIT_START_POSITION + 1
#define CTRL_A 1
#define CTRL_Q 17
#define HISTORY_DEFAULT_SIZE 100
#define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
using namespace std;

int CommandLine::countItems;
bool CommandLine::insertMode;
int CommandLine::eraseCharacter;
char CommandLine::menuItems[HISTORY_DEFAULT_SIZE][WIN_WIDTH];
History<CommandLine> CommandLine::history = History<CommandLine>(HISTORY_DEFAULT_SIZE);

CommandLine::CommandLine() {
	this->line = line;
	commandLength = 0;
}

CommandLine::CommandLine(string line) {
	this->line = line;
	commandLength = line.length();
}

CommandLine::CommandLine(CommandLine &other) {
	this->line = other.line;
	commandLength = line.length();
}

CommandLine::CommandLine(char c) {
	line = "";
	line += c;
	commandLength = 1;
}

const CommandLine & CommandLine::operator= (const CommandLine &rhs) {
	this->line = rhs.line;
	commandLength = line.length();
	return *this;
}

CommandLine::~CommandLine() {
}

string CommandLine::getTheString(){//not in use
	return line;
}

int CommandLine::edit() {
	int c;

	WINDOW *win = initWindow();
	eraseCharacter = erasechar();
	commandLength = line.length();
	wmove(win, 1, EDIT_START_POSITION);
	waddstr(win, line.c_str());
	history.goPastEnd();
	while (true) {
		getyx(win,currY, currX);
		c=wgetch(win);
		if (c == eraseCharacter || c == KEY_BACKSPACE) {
			leftArrow(win);
			deleteCharacter(win);
		} else if (c < KEY_MIN && isprint(c)) {
			winAddChar(win,c);
		} else {
			switch(c){
			case KEY_IC:
				toggleInsertMode();
				break;
			case KEY_LEFT:
				leftArrow(win);
				wrefresh(win);
				break;
			case KEY_RIGHT:
				rightArrow(win);
				wrefresh(win);
				break;
			case KEY_DC:
				deleteCharacter(win);
				refresh();
				break;
			case KEY_MOUSE:
				mouseClick(win);
				break;
			case KEY_HOME:
				homeKey(win);
				break;
			case KEY_END:
				endKey(win);
				break;
			case KEY_UP:
				upArrow(win);
				break;
			case KEY_DOWN:
				downArrow(win);
				break;
			case CTRL_A:
				showHistory(win);
				break;
			default:
				updateLineFromWindow(win);
				endwin();
				if (c != 4) {
				history.append(this);
				}
				return c;
			}
		}
	}
}


void CommandLine::send(int fd) {
	const char LF = '\n';
	write(fd, line.c_str() , line.length());
	write(fd, &LF, 1);
}

void CommandLine::init(){
	insertMode= false;
	countItems=0;
	toggleInsertMode();
}

void CommandLine::toggleInsertMode(){
	insertMode = ! insertMode;
	curs_set(insertMode ? 1 : 2);
}

void CommandLine::leftArrow(WINDOW *win){
	if(currX == EDIT_START_POSITION) return;
	wmove(win,currY,currX-1);
}

void CommandLine::rightArrow(WINDOW *win){
	if(currX == commandLength+EDIT_START_POSITION) return;
	wmove(win,currY,currX+1);
}

void CommandLine::updateLineFromWindow(WINDOW *win){
	int i;
	char c;
	line = "";
	for(i=0; i < commandLength; i++){
		c = mvwinch(win,1,EDIT_START_POSITION+i);
		line += c;
	}
	strcpy(menuItems[countItems++],line.c_str());
}


void CommandLine::deleteCharacter(WINDOW *win)
{
	wdelch(win);
	commandLength--;
}

void CommandLine::winAddChar(WINDOW *win, int c)
{
	if (insertMode) {
		if (commandLength == MAX_COMMAND_LENGTH) {
			flash();
			return;
		}
		winsch(win,c);
		wmove(win, currY, currX+1);
		commandLength++;
	} else {
		if (currX == EDIT_END_POSITION) {
			flash();
			return;
		}
		waddch(win, c);
		if (currX == commandLength + EDIT_START_POSITION) commandLength++;
	}
}

void CommandLine::mouseClick(WINDOW *win){
	MEVENT mouseEvent;
	getmouse(&mouseEvent);

	if (mouseEvent.y != WIN_TOP + 1) return;
	if (mouseEvent.x >= EDIT_START_POSITION &&
			mouseEvent.x <= commandLength + EDIT_START_POSITION) {
		wmove(win,mouseEvent.y - WIN_TOP, mouseEvent.x-WIN_LEFT);
	}
}

void CommandLine::homeKey(WINDOW *win){
	wmove(win,1,EDIT_START_POSITION);
}

void CommandLine::endKey(WINDOW *win){
	wmove(win,1,commandLength+EDIT_START_POSITION);
}

void CommandLine::restartEdit(WINDOW *win) {
	wclear(win);
	box(win, 0, 0);
	mvwaddstr(win, WIN_HEIGHT-1, WIN_WIDTH - 20, "CTRL-D TO TERMINATE");
	wmove(win, 1, EDIT_START_POSITION);
	waddstr(win, line.c_str());
}


void CommandLine::upArrow(WINDOW *win)
{
	CommandLine *other = history.up();
	if (other) {
		*this = *other;
		restartEdit(win);
	}
}

void CommandLine::downArrow(WINDOW *win)
{
	CommandLine *other = history.down();
	if (other) {
		*this = *other;
		restartEdit(win);
	}
}

void CommandLine::showHistory(WINDOW *win)
{
	ITEM **my_items;
	MENU *my_menu;
	WINDOW *my_menu_win;
	int c, n_choices, i;

	/* Initialize curses */
		initscr();
		start_color();
		cbreak();
		noecho();
		keypad(stdscr, TRUE);
		init_pair(1, COLOR_RED, COLOR_BLACK);
		init_pair(2, COLOR_CYAN, COLOR_BLACK);

		/* Create items */
		n_choices = ARRAY_SIZE(menuItems);
		my_items = (ITEM **)calloc(n_choices, sizeof(ITEM *));
		for(i = 0; i < n_choices; ++i)
		my_items[i] = new_item(menuItems[i],NULL);

			/* Crate menu */
			my_menu = new_menu((ITEM **)my_items);

			/* Create the window to be associated with the menu */
		        my_menu_win = newwin(10, 40, 4, 4);
		        keypad(my_menu_win, TRUE);

			/* Set main window and sub window */
		        set_menu_win(my_menu, my_menu_win);
		        set_menu_sub(my_menu, derwin(my_menu_win, 6, 38, 3, 1));
		        set_menu_format(my_menu, 5, 1);

			/* Set menu mark to the string " * " */
		        set_menu_mark(my_menu, " * ");

			/* Print a border around the main window and print a title */
		        box(my_menu_win, 0, 0);
		        drawmenu(my_menu_win, 1, 0, 40, "My Menu", COLOR_PAIR(1));
		        mvwaddch(my_menu_win, 2, 0, ACS_LTEE);
		        mvwhline(my_menu_win, 2, 1, ACS_HLINE, 38);
		        mvwaddch(my_menu_win, 2, 39, ACS_RTEE);

			/* Post the menu */
		        post_menu(my_menu);
		        wrefresh(my_menu_win);

		        attron(COLOR_PAIR(2));
		        mvprintw(LINES - 2, 0, "Use PageUp and PageDown to scoll down or up a page of items");
		        mvprintw(LINES - 1, 0, "Arrow Keys to navigate (CTRL_Q to Exit)");
		        attroff(COLOR_PAIR(2));
		        refresh();

			while((c = wgetch(my_menu_win)) != CTRL_Q)
			{       switch(c)
			        {
					case KEY_DOWN:
						menu_driver(my_menu, REQ_DOWN_ITEM);
						break;
					case KEY_UP:
						menu_driver(my_menu, REQ_UP_ITEM);
						break;
					case KEY_NPAGE:
						menu_driver(my_menu, REQ_SCR_DPAGE);
						break;
					case KEY_PPAGE:
						menu_driver(my_menu, REQ_SCR_UPAGE);
						break;
					default:
						restartEdit(my_menu_win);
						c = CTRL_Q;
						break;
				}
		                wrefresh(my_menu_win);
			}

			/* Unpost and free all the memory taken up */
		        unpost_menu(my_menu);
		        free_menu(my_menu);
		        for(i = 0; i < n_choices; ++i)
		                free_item(my_items[i]);
			endwin();
}

void CommandLine::drawmenu(WINDOW *win, int starty, int startx, int width, std::string str, chtype color)
{
		int length, x, y;
		float temp;
		if(win == NULL)
		win = stdscr;
		getyx(win, y, x);
		if(startx != 0)
		x = startx;
		if(starty != 0)
		y = starty;
		if(width == 0)
		width = 80;
		length = str.length();
		temp = (width - length)/ 2;
		x = startx + (int)temp;
		wattron(win, color);
		mvwprintw(win,y, x,"%s",str.c_str());
		wattroff(win, color);
		refresh();
}

WINDOW *CommandLine::initWindow() {
	WINDOW *ret;

	newterm(NULL, stdout, stdin);
	raw();
	//  cbreak();
	noecho();
	start_color();
	//  init_pair(RED_BLUE, COLOR_RED, COLOR_BLUE);
	ret = newwin(WIN_HEIGHT,WIN_WIDTH,WIN_TOP,0);
	box(ret, 0, 0);
	mvwaddstr(ret, WIN_HEIGHT-1, WIN_WIDTH - 20, "CTRL-D TO TERMINATE");
	keypad(ret, true);
	mousemask(BUTTON1_CLICKED | BUTTON1_DOUBLE_CLICKED, NULL);
	refresh();
	return ret;
}

// #define RED_BLUE 1

/*  Remnants of a trial program written at the beginning of the semester
    wattron(inputWindow, A_STANDOUT);
    mvwprintw(inputWindow, 5, 15, "Hello %s", "World");
    mvwaddch(inputWindow, 6, 15, 'X');
    wattron(inputWindow, COLOR_PAIR(RED_BLUE));
    mvwprintw(inputWindow, 7, 15, "Red / Blue");
    wattroff(inputWindow, COLOR_PAIR(RED_BLUE));
    wattroff(inputWindow, A_STANDOUT);
    wrefresh(inputWindow);
 */
