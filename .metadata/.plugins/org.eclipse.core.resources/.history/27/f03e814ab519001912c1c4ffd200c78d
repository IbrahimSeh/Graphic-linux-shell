/*
 * CommandLine.cpp
 *
 *  Created on: Mar 17, 2018
 *      Author: cmshalom
 */


#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <algorithm>
using namespace std;
#include "CommandLine.h"

#define WIN_LEFT 0
#define WIN_TOP 21
#define WIN_HEIGHT 3
#define WIN_WIDTH 80
#define EDIT_START_POSITION 1
#define EDIT_END_POSITION WIN_WIDTH - 2
#define MAX_COMMAND_LENGTH EDIT_END_POSITION - EDIT_START_POSITION + 1
#define HISTORY_DEFAULT_SIZE 100
#define CTRL_A 1
#define CTRL_W 23
#define TAB 9
using namespace std;

bool CommandLine::insertMode;
int CommandLine::eraseCharacter;
History<CommandLine> CommandLine::history = History<CommandLine>(HISTORY_DEFAULT_SIZE);

CommandLine::CommandLine(int fd) {
	this->line = line;
	commandLength = 0;
	this->fd = fd;
}

CommandLine::CommandLine(string line, int fd) {
	this->line = line;
	commandLength = line.length();
	this->fd = fd;
}

CommandLine::CommandLine(CommandLine &other) {
	this->line = other.line;
	this->fd = other.fd;
	commandLength = line.length();
}

CommandLine::CommandLine(char c, int fd) {
	line = "";
	line += c;
	commandLength = 1;
	this->fd = fd;
}

const CommandLine & CommandLine::operator= (const CommandLine &rhs) {
	this->line = rhs.line;
	commandLength = line.length();
	return *this;
}

CommandLine::~CommandLine() {
}

string CommandLine::getTheString(){
	return line;
}

int CommandLine::edit() {
	int c;

	WINDOW *win = initWindow();
	eraseCharacter = erasechar();
	commandLength = line.length();
	wmove(win, 1, EDIT_START_POSITION);
	waddstr(win, line.c_str());
	history.goPastEnd();
	while (true) {
		getyx(win,currY, currX);
		c=wgetch(win);
		if (c == eraseCharacter || c == KEY_BACKSPACE) {
			leftArrow(win);
			deleteCharacter(win);
		} else if (c < KEY_MIN && isprint(c)) {
			winAddChar(win,c);
		} else {
			switch(c){
			case KEY_IC:
				toggleInsertMode();
				break;
			case KEY_LEFT:
				leftArrow(win);
				wrefresh(win);
				break;
			case KEY_RIGHT:
				rightArrow(win);
				wrefresh(win);
				break;
			case KEY_DC:
				deleteCharacter(win);
				refresh();
				break;
			case KEY_MOUSE:
				mouseClick(win);
				break;
			case KEY_HOME:
				homeKey(win);
				break;
			case KEY_END:
				endKey(win);
				break;
			case KEY_UP:
				upArrow(win);
				break;
			case KEY_DOWN:
				downArrow(win);
				break;
			case CTRL_A:
				showHistory(win);
				break;
			case TAB:
				updateLineFromWindow(win);
				tabCompletion(win);
				break;
			default:
				updateLineFromWindow(win);
				endwin();
				if (c != 4 && !line.empty()) {
					history.append(this);
				}
				return c;
			}
		}
	}
}

void CommandLine::send() {
	const char LF = '\n';
	write(fd, line.c_str() , line.length());
	write(fd, &LF, 1);
}

void CommandLine::init(){
	insertMode= false;
	toggleInsertMode();
}

void CommandLine::toggleInsertMode(){
	insertMode = ! insertMode;
	curs_set(insertMode ? 1 : 2);
}

void CommandLine::leftArrow(WINDOW *win){
	if(currX == EDIT_START_POSITION) return;
	wmove(win,currY,currX-1);
}

void CommandLine::rightArrow(WINDOW *win){
	if(currX == commandLength+EDIT_START_POSITION) return;
	wmove(win,currY,currX+1);
}

void CommandLine::updateLineFromWindow(WINDOW *win){
	int i;
	char c;
	line = "";
	for(i=0; i < commandLength; i++){
		c = mvwinch(win,1,EDIT_START_POSITION+i);
		line += c;
	}

}


void CommandLine::deleteCharacter(WINDOW *win)
{
	wdelch(win);
	commandLength--;
}

void CommandLine::winAddChar(WINDOW *win, int c)
{
	if (insertMode) {
		if (commandLength == MAX_COMMAND_LENGTH) {
			flash();
			return;
		}
		winsch(win,c);
		wmove(win, currY, currX+1);
		commandLength++;
	} else {
		if (currX == EDIT_END_POSITION) {
			flash();
			return;
		}
		waddch(win, c);
		if (currX == commandLength + EDIT_START_POSITION) commandLength++;
	}
}

void CommandLine::mouseClick(WINDOW *win){
	MEVENT mouseEvent;
	getmouse(&mouseEvent);

	if (mouseEvent.y != WIN_TOP + 1) return;
	if (mouseEvent.x >= EDIT_START_POSITION &&
			mouseEvent.x <= commandLength + EDIT_START_POSITION) {
		wmove(win,mouseEvent.y - WIN_TOP, mouseEvent.x-WIN_LEFT);
	}
}

void CommandLine::homeKey(WINDOW *win){
	wmove(win,1,EDIT_START_POSITION);
}

void CommandLine::endKey(WINDOW *win){
	wmove(win,1,commandLength+EDIT_START_POSITION);
}

void CommandLine::restartEdit(WINDOW *win) {
	wclear(win);
	box(win, 0, 0);
	mvwaddstr(win, WIN_HEIGHT-1, WIN_WIDTH - 20, "CTRL-D TO TERMINATE");
	wmove(win, 1, EDIT_START_POSITION);
	waddstr(win, line.c_str());
	wrefresh(win);
}


void CommandLine::upArrow(WINDOW *win)
{
	CommandLine *other = history.up();
	if (other) {
		*this = *other;
		restartEdit(win);
	}
}

void CommandLine::downArrow(WINDOW *win)
{
	CommandLine *other = history.down();
	if (other) {
		*this = *other;
		restartEdit(win);
	}
}

void  CommandLine::showHistory(WINDOW *win)
{
	string line = history.showHistory();
	if (!line.empty()) {
		this->line = line;
		this->commandLength = line.length();
	}restartEdit(win);
}

void  CommandLine::tabCompletion(WINDOW *win)
{
	int lengthItems;
	char c;
	const char tab = TAB;
	const char werase = CTRL_W;
	string tabLine;

	fd_set fds;

	struct timeval tv;
	tv.tv_sec = 1;
	tv.tv_usec = 0;

	write(fd, line.c_str() , line.length());
	write(fd, &tab, 1);
	write(fd, &tab, 1);

	FD_ZERO(&fds);
	FD_SET(fd,&fds);
	while ((select(fd+1,&fds,NULL,NULL,&tv)) > 0) {
		if (FD_ISSET(fd,&fds)){
			read(fd, &c,1);
			tabLine += c;
			fflush (stdout);
		}
	}
std::unique(tabLine.begin(),NULL,NULL);
	std::string::iterator new_end = std::unique(tabLine.begin(), tabLine.end(), NULL);
	tabLine.erase(new_end, tabLine.end());
	printf("tabLine = %s\n",tabLine.c_str());
	/*string *stringItems  = new string[lengthItems];
	stringItems = splitString(tabLine ,stringItems);
	Menu *menu = new Menu(lengthItems, stringItems);
	string chosen = menu->showMenu();
	delete []stringItems;
	delete[] writable;
	line = line.substr(0, line.find(' ')+1);
	if (!chosen.empty()) {
		this->line +=chosen;//Concatenate the current string
		this->commandLength += chosen.length();
	}
	write(fd, &werase, 1);
	write(fd, &werase, 1);
	restartEdit(win);*/
}
bool CommandLine::BothAreSpaces(char lhs, char rhs)
{
	return (lhs == rhs) && (lhs == ' ');
}
void CommandLine::replaceSpacesToSpace(char *charLine, string *stringItems)
{
	   char *token;

	   /* get the first token */
	   token = strtok(charLine, " \n");

	   /* walk through other tokens */
	   while( token != NULL ) {
	      printf( " %s\n", token );

	      token = strtok(NULL, " \n");
	   }
}

int CommandLine::countSpaces(string& line)
{
	int count = 0;
	int length = line.length();
	for (int i = 0; i < length; i++) {
		int c = line[i];
		if (isspace(c))
			count++;
	}
	return count;
}

string *CommandLine::splitString(string line, string *stringItems)
{
	int i = 0;
	std::string delimiter = " ";

	size_t pos = 0;
	std::string token;
	while ((pos = line.find(delimiter)) != std::string::npos) {
		token = line.substr(0, pos);
		stringItems[i] = token; i++;
		line.erase(0, pos + delimiter.length());
	}
	token = line.substr(0, pos);
	stringItems[i] = token;
	return stringItems;
}

WINDOW *CommandLine::initWindow() {
	WINDOW *ret;

	newterm(NULL, stdout, stdin);
	raw();
	//  cbreak();
	noecho();
	start_color();
	//  init_pair(RED_BLUE, COLOR_RED, COLOR_BLUE);
	ret = newwin(WIN_HEIGHT,WIN_WIDTH,WIN_TOP,0);
	box(ret, 0, 0);
	mvwaddstr(ret, WIN_HEIGHT-1, WIN_WIDTH - 20, "CTRL-D TO TERMINATE");
	keypad(ret, true);
	mousemask(BUTTON1_CLICKED | BUTTON1_DOUBLE_CLICKED, NULL);
	refresh();
	return ret;
}
