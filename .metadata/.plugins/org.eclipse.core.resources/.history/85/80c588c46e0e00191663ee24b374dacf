/*
 * History.cpp
 *
 *  Created on: Dec 11, 2018
 *      Author: root
 */

#include "History.h"

template <class HistoryItem>
History<HistoryItem>::History(int size) {
	this->size = size;
	first = last = current = NULL;
	count = 0;
}

template <class HistoryItem>
History<HistoryItem>::~History() {
	struct element *p, *q;
	p = first;
	while (p) {
		q=p;
		p=p->next;
		delete q;
	}

}

template <class HistoryItem>
void History<HistoryItem>::append(HistoryItem *item){
	if(count == size) return ;
	struct element *p = new struct element;
	p->item = item;
	p->next = NULL;
	p->prev = last;
	if (last) {
		last->next = p;
	} else {
		first=p;
	}
	last = p;
	current = p;
	count++;
}

template <class HistoryItem>
void History<HistoryItem>::goPastEnd()
{
	current=NULL;
}


template <class HistoryItem>
HistoryItem *History<HistoryItem>::up()
{
	if (!first) return NULL;
	if (current == NULL) {
		current = last;
	} else if (current != first) current = current->prev;
	return current ? current->item : NULL;
}

template <class HistoryItem>
HistoryItem *History<HistoryItem>::down()
{
	if (!first) return NULL;
	if (current != NULL && current != last) current = current->next;
	return current ? current->item : NULL;
}

template <class HistoryItem>
HistoryItem *History<HistoryItem>::getItem(int i)
{
	element *p = first;
	while(i--)
	{
		p=p->next;
	}
	return p->item;
}

template <class HistoryItem>
void  History<HistoryItem>::showHistory()
{
	ITEM **my_items;
	MENU *my_menu;
	WINDOW *my_menu_win;
	int c, n_choices, i;
	std::string tline;

	/* Initialize curses *
		initscr();
		start_color();
	        cbreak();
	        noecho();
		keypad(stdscr, TRUE);
		init_pair(1, COLOR_RED, COLOR_BLACK);
		init_pair(2, COLOR_CYAN, COLOR_BLACK);

	/* Create items */
	n_choices = getCount();//printf("n_choices = %d\n",n_choices);
	my_items = (ITEM **)calloc(n_choices, sizeof(ITEM *));
	struct element *p=first;

	for(i = 0; i < n_choices; ++i)
	{
		my_items[i] = new_item(p->item->getTheString().c_str(),NULL);
		p = p->next;
		printf("line = %s\n",p->item->getTheString().c_str());
	}

}

template <class HistoryItem>
void  History<HistoryItem>::drawmenu(WINDOW *win, int starty, int startx, int width, std::string str, chtype color)
{
	int length, x, y;
	float temp;
	if(win == NULL)
		win = stdscr;
	getyx(win, y, x);
	if(startx != 0)
		x = startx;
	if(starty != 0)
		y = starty;
	if(width == 0)
		width = 80;
	length = str.length();
	temp = (width - length)/ 2;
	x = startx + (int)temp;
	wattron(win, color);
	mvwprintw(win,y, x,"%s",str.c_str());
	wattroff(win, color);
	refresh();

}
